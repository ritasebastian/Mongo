Install mongodb 6 amazon 2 EC2
sudo yum update -y
cat <<EOF | sudo tee /etc/yum.repos.d/mongodb-org-6.0.repo
[mongodb-org-6.0]
name=MongoDB Repository
baseurl=https://repo.mongodb.org/yum/amazon/2/mongodb-org/6.0/x86_64/
gpgcheck=1
enabled=1
gpgkey=https://pgp.mongodb.com/server-6.0.asc
EOF

sudo yum install -y mongodb-org
sudo systemctl enable mongod
sudo systemctl start mongod
sudo systemctl status mongod
Data files in /var/lib/mongo Log files in /var/log/mongodb
Start a mongosh session on the same host machine as the mongod. You can run mongosh without any command-line options to connect to a mongod that is running on your localhost with default port 27017.

sudo cat << EOF > /etc/mongodb.conf
replication :    
    oplogSizeMB : 256
    replSetName : "rs"
systemLog :
   destination : file
   path : "/var/log/mongodb/logs/mdb.log"
   logAppend : true
processManagement:
   fork : true
storage :
    dbPath : "/var/lib/mongo/mongodb/data"
net :
    port : 27017
    bindIp : 0.0.0.0
EOF

sudo systemctl stop mongod
sudo systemctl start mongod
sudo systemctl status mongod

mongosh --quiet admin --eval "db.createUser({user: 'admin_user', pwd: 'admin_password', roles: [{role: 'userAdminAnyDatabase', db: 'admin'}, {role: 'dbOwner', db: 'admin'}, {role: 'clusterAdmin', db: 'admin'}]})"

echo 'mongosh --quiet -u admin_user -p admin_password --authenticationDatabase=admin' > login.sh
chmod +x login.sh
./login.sh



Update the /etc/hosts files collect the IP's update 
hostname -I 
sudo vi /etc/hosts
cat /etc/hosts

Sample format
172.31.28.137 db1
172.31.28.25 db2
172.31.26.204 db3

Trusted connect all 3 hosts "Not needed by easy to copy the file(s)
scp -i "2004test.pem" 2004test.pem ec2-user@ec2-54-87-232-135.compute-1.amazonaws.com:/home/ec2-user/
touch ~/.ssh/config
chmod 600 ~/.ssh/config
cat ~/.ssh/config
Host *
  IdentityFile "/home/ec2-user/2004test.pem"
  User ec2-user
  Port 22

The following commands are executed on one machine only

mongosh <<EOF
use admin
rs.initiate({
  "_id": "rs",
  "members": [
    {"_id": 1, "host": "db1:27017", "priority": 5},
    {"_id": 2, "host": "db2:27017", "priority": 4},
    {"_id": 3, "host": "db3:27017", "priority": 3}
  ]
})
EOF

mongosh --quiet admin --eval "db.createUser({user: 'admin_user', pwd: 'admin_password', roles: [{role: 'userAdminAnyDatabase', db: 'admin'}, {role: 'dbOwner', db: 'admin'}, {role: 'clusterAdmin', db: 'admin'}]})"

sudo mkdir -p /etc/mongodb/keys/
openssl rand -base64 756 | sudo tee /etc/mongodb/keys/mongo-key > /dev/null
sudo chmod 400 /etc/mongodb/keys/mongo-key
sudo chown -R mongod:mongod /etc/mongodb
echo -e "security:\n  authorization: enabled\n  keyFile: /etc/mongodb/keys/mongo-key\n " | sudo tee -a /etc/mongod.conf
sudo scp -i "2004test.pem" /etc/mongodb/keys/mongo-key ec2-user@db2:/tmp
sudo scp -i "2004test.pem" /etc/mongodb/keys/mongo-key ec2-user@db3:/tmp

Each noed(s) run below Copy the keyfile to other 2 nodes
sudo mkdir -p /etc/mongodb/keys/
sudo cp /tmp/mongo-key /etc/mongodb/keys/
sudo chmod 400 /etc/mongodb/keys/mongo-key
sudo chown -R mongod:mongod /etc/mongodb

sudo systemctl restart mongod
sudo systemctl status mongod


# Check the status of the replica set
rs.status()

# check oplog size and time range
rs.printReplicationInfo()

# check replica set members and replication lag
rs.printSecondaryReplicationInfo()


# sudo vi /etc/mongod.conf
# bindIp: public-dns-name
Replace public-dns-name with the actual public DNS name for your instance, for example ec2-11-22-33-44.us-west-2.compute.amazonaws.com. Example bindIp: 172.31.88.212 ( internal Ip)
# sudo service mongod restart

NEW_IP=$(hostname -I | awk '{print $1}')
sudo sed -i "s/27.0.0.1/$NEW_IP/" /etc/mongod.conf
sudo systemctl restart mongod
sudo systemctl status mongod

Create Key on node1
sudo mkdir -p /etc/mongodb/keys/
openssl rand -base64 756 | sudo tee /etc/mongodb/keys/mongo-key > /dev/null
sudo chmod 400 /etc/mongodb/keys/mongo-key
sudo chown -R mongod:mongod /etc/mongodb
echo -e "security:\n  authorization: enabled\n  keyFile: /etc/mongodb/keys/mongo-key\n " | sudo tee -a /etc/mongod.conf
sudo systemctl restart mongod
sudo systemctl status mongod

sudo scp -i "2004test.pem" /etc/mongodb/keys/mongo-key ec2-user@db2:/tmp
sudo scp -i "2004test.pem" /etc/mongodb/keys/mongo-key ec2-user@db3:/tmp

Each noed(s) run below 
sudo mkdir -p /etc/mongodb/keys/
sudo cp /tmp/mongo-key /etc/mongodb/keys/
sudo chmod 400 /etc/mongodb/keys/mongo-key
sudo chown -R mongod:mongod /etc/mongodb
echo -e "security:\n  authorization: enabled\n  keyFile: /etc/mongodb/keys/mongo-key\n  " | sudo tee -a /etc/mongod.conf

sudo systemctl restart mongod
sudo systemctl status mongod

Add replicat On Node 1(db1)

vi /etc/mongod.conf

security:
 authorization: enabled
 keyFile:  /etc/mongodb/keys/mongo-key
replication:
  replSetName: "replicaset-01"

echo -e "\nreplication:\n  replSetName: \"replicaset-01\"\n" | sudo tee -a /etc/mongod.conf
rs.initiate()
rs.add(“db2:27017”)
rs.add(“db3:27017”)

sudo systemctl stop mongod
sudo systemctl start mongod
sudo systemctl status mongod

https://hevodata.com/learn/mongodb-replica-set-config/








